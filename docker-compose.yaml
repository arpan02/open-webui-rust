services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: open-webui-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-open_webui}
      POSTGRES_USER: ${POSTGRES_USER:-open_webui}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-open_webui_password}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-open_webui}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - open-webui-network

  # Redis (optional, for caching and WebSocket management)
  redis:
    image: redis:7-alpine
    container_name: open-webui-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - open-webui-network

  # Rust Backend
  rust-backend:
    image: public.ecr.aws/o3p7x2f5/knoxchat/open-webui-rust-backend:latest
    container_name: open-webui-rust-backend
    environment:
      # Server
      HOST: ${HOST:-0.0.0.0}
      PORT: ${RUST_PORT:-8080}
      ENV: ${ENV:-prod}
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-}
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-open_webui}:${POSTGRES_PASSWORD:-open_webui_password}@postgres:5432/${POSTGRES_DB:-open_webui}
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-20}
      DATABASE_POOL_MAX_OVERFLOW: ${DATABASE_POOL_MAX_OVERFLOW:-10}
      DATABASE_POOL_TIMEOUT: ${DATABASE_POOL_TIMEOUT:-30}
      DATABASE_POOL_RECYCLE: ${DATABASE_POOL_RECYCLE:-1800}
      
      # Redis
      ENABLE_REDIS: ${ENABLE_REDIS:-true}
      REDIS_URL: redis://redis:6379
      
      # Authentication
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-30d}
      ENABLE_SIGNUP: ${ENABLE_SIGNUP:-true}
      ENABLE_LOGIN_FORM: ${ENABLE_LOGIN_FORM:-true}
      ENABLE_API_KEY: ${ENABLE_API_KEY:-true}
      DEFAULT_USER_ROLE: ${DEFAULT_USER_ROLE:-user}
      SHOW_ADMIN_DETAILS: ${SHOW_ADMIN_DETAILS:-true}
      WEBUI_URL: ${WEBUI_URL:-http://localhost:3000}
      
      # CORS
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN:-*}
      
      # WebSocket/Socket.IO
      ENABLE_WEBSOCKET_SUPPORT: ${ENABLE_WEBSOCKET_SUPPORT:-true}
      WEBSOCKET_MANAGER: ${WEBSOCKET_MANAGER:-redis}
      WEBSOCKET_REDIS_URL: ${WEBSOCKET_REDIS_URL:-redis://redis:6379}
      SOCKETIO_BRIDGE_URL: ${SOCKETIO_BRIDGE_URL:-http://socketio-bridge:8081}
      
      # Features
      ENABLE_OPENAI_API: ${ENABLE_OPENAI_API:-true}
      ENABLE_CHANNELS: ${ENABLE_CHANNELS:-true}
      ENABLE_IMAGE_GENERATION: ${ENABLE_IMAGE_GENERATION:-false}
      ENABLE_CODE_EXECUTION: ${ENABLE_CODE_EXECUTION:-false}
      ENABLE_WEB_SEARCH: ${ENABLE_WEB_SEARCH:-false}
      ENABLE_ADMIN_CHAT_ACCESS: ${ENABLE_ADMIN_CHAT_ACCESS:-true}
      ENABLE_ADMIN_EXPORT: ${ENABLE_ADMIN_EXPORT:-true}
      ENABLE_NOTES: ${ENABLE_NOTES:-true}
      ENABLE_COMMUNITY_SHARING: ${ENABLE_COMMUNITY_SHARING:-true}
      ENABLE_MESSAGE_RATING: ${ENABLE_MESSAGE_RATING:-true}
      
      # Storage
      UPLOAD_DIR: ${UPLOAD_DIR:-/app/data/uploads}
      CACHE_DIR: ${CACHE_DIR:-/app/data/cache}
      STATIC_DIR: ${STATIC_DIR:-/app/static}
      
      # Logging
      GLOBAL_LOG_LEVEL: ${GLOBAL_LOG_LEVEL:-info}
      RUST_LOG: ${RUST_LOG:-info}
      
      # OpenAI
      OPENAI_API_BASE_URL: ${OPENAI_API_BASE_URL:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      
    volumes:
      - rust_backend_data:/app/data
    ports:
      - "${RUST_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - open-webui-network

  # Socket.IO Bridge (Python)
  socketio-bridge:
    image: public.ecr.aws/o3p7x2f5/knoxchat/open-webui-socketio-bridge:latest
    container_name: open-webui-socketio-bridge
    environment:
      RUST_BACKEND_URL: http://rust-backend:8080
      SOCKETIO_PORT: ${SOCKETIO_PORT:-8081}
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      REDIS_URL: redis://redis:6379
      USE_REDIS: ${USE_REDIS:-true}
    ports:
      - "${SOCKETIO_PORT:-8081}:8081"
    depends_on:
      rust-backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - open-webui-network

  # Frontend (SvelteKit)
  frontend:
    image: public.ecr.aws/o3p7x2f5/knoxchat/open-webui-frontend:latest
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   args:
    #     BUILD_HASH: ${BUILD_HASH:-dev-build}
    #     USE_CUDA: ${USE_CUDA:-false}
    #     USE_SLIM: ${USE_SLIM:-false}
    #     USE_PERMISSION_HARDENING: ${USE_PERMISSION_HARDENING:-false}
    #     USE_CUDA_VER: ${USE_CUDA_VER:-cu128}
    #     USE_EMBEDDING_MODEL: ${USE_EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
    #     USE_RERANKING_MODEL: ${USE_RERANKING_MODEL:-}
    #     UID: ${UID:-0}
    #     GID: ${GID:-0}
    container_name: open-webui-frontend
    environment:
      # Backend URLs
      BACKEND_URL: ${BACKEND_URL:-http://rust-backend:8080}
      SOCKETIO_URL: ${SOCKETIO_URL:-http://socketio-bridge:8081}
      
      # Python Backend (for backward compatibility features)
      ENV: ${ENV:-prod}
      PORT: 8080
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-}
      
      # Database (Python backend may need it for certain features)
      DATABASE_URL: postgresql://${POSTGRES_USER:-open_webui}:${POSTGRES_PASSWORD:-open_webui_password}@postgres:5432/${POSTGRES_DB:-open_webui}
      
      # OpenAI
      OPENAI_API_BASE_URL: ${OPENAI_API_BASE_URL:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      
      # RAG & Embeddings
      RAG_EMBEDDING_MODEL: ${RAG_EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      RAG_RERANKING_MODEL: ${RAG_RERANKING_MODEL:-}
      RAG_EMBEDDING_MODEL_AUTO_UPDATE: ${RAG_EMBEDDING_MODEL_AUTO_UPDATE:-false}
      
      # Whisper
      WHISPER_MODEL: ${WHISPER_MODEL:-base}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Features
      ENABLE_RAG_WEB_SEARCH: ${ENABLE_RAG_WEB_SEARCH:-false}
      ENABLE_RAG_HYBRID_SEARCH: ${ENABLE_RAG_HYBRID_SEARCH:-false}
      ENABLE_IMAGE_GENERATION: ${ENABLE_IMAGE_GENERATION:-false}
      
      # Analytics
      SCARF_NO_ANALYTICS: ${SCARF_NO_ANALYTICS:-true}
      DO_NOT_TRACK: ${DO_NOT_TRACK:-true}
    
    volumes:
      - frontend_data:/app/backend/data
    ports:
      - "${OPEN_WEBUI_PORT:-3000}:8080"
    depends_on:
      rust-backend:
        condition: service_healthy
      socketio-bridge:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - open-webui-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rust_backend_data:
    driver: local
  frontend_data:
    driver: local

networks:
  open-webui-network:
    driver: bridge
