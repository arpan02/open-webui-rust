services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: open-webui-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-open_webui}
      POSTGRES_USER: ${POSTGRES_USER:-open_webui}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-open_webui_password}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      # Mount initialization scripts if needed
      # - ./rust-backend/migrations/postgres:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-open_webui}"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - open-webui-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: open-webui-redis-dev
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_dev:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - open-webui-network

  # Socket.IO Bridge (for development with hot reload)
  socketio-bridge:
    build:
      context: ./rust-backend
      dockerfile: Dockerfile.socketio
    container_name: open-webui-socketio-bridge-dev
    environment:
      RUST_BACKEND_URL: ${RUST_BACKEND_URL:-http://host.docker.internal:8080}
      SOCKETIO_PORT: ${SOCKETIO_PORT:-8081}
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      REDIS_URL: redis://redis:6379
      USE_REDIS: ${USE_REDIS:-true}
      PYTHONUNBUFFERED: "1"
    volumes:
      # Mount source code for hot reload in development
      - ./rust-backend/socketio_bridge.py:/app/socketio_bridge.py:ro
    ports:
      - "${SOCKETIO_PORT:-8081}:8081"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - open-webui-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Optional: Database Admin UI (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: open-webui-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - open-webui-network
    profiles:
      - tools

  # Optional: Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: open-webui-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - open-webui-network
    profiles:
      - tools

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  pgadmin_data:
    driver: local

networks:
  open-webui-network:
    driver: bridge

